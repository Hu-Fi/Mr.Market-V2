import { MigrationInterface, QueryRunner } from "typeorm";

export class Init1747403718608 implements MigrationInterface {
    name = 'Init1747403718608'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "trade_operation" ("id" SERIAL NOT NULL, "status" character varying NOT NULL, "details" jsonb, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "orderId" integer, CONSTRAINT "PK_60c654bfe4bd12ae04c81d93dc4" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "trade_order" ("id" SERIAL NOT NULL, "exchangeName" character varying NOT NULL, "userId" character varying NOT NULL, "clientId" character varying NOT NULL, "symbol" character varying NOT NULL, "side" character varying NOT NULL, "type" character varying NOT NULL, "amount" numeric(32,16) NOT NULL DEFAULT '0', "price" numeric(18,10), "status" character varying NOT NULL, "orderExtId" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_88e5266e7b5b3a4ef9d5e349a71" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "strategy_arbitrage" ("id" SERIAL NOT NULL, "userId" character varying NOT NULL, "clientId" character varying NOT NULL, "sideA" character varying NOT NULL, "sideB" character varying NOT NULL, "amountToTrade" numeric(32,16) NOT NULL DEFAULT '0', "minProfitability" numeric(3,2) NOT NULL, "exchangeAName" character varying NOT NULL, "exchangeBName" character varying NOT NULL, "checkIntervalSeconds" integer NOT NULL, "maxOpenOrders" integer, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "status" character varying NOT NULL, "lastTradingAttemptAt" TIMESTAMP, "pausedReason" character varying, CONSTRAINT "PK_7d051b768f8227edcb249ff571f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "strategy_market_making" ("id" SERIAL NOT NULL, "userId" character varying NOT NULL, "clientId" character varying NOT NULL, "sideA" character varying NOT NULL, "sideB" character varying NOT NULL, "exchangeName" character varying NOT NULL, "oracleExchangeName" character varying, "startPrice" numeric(16,8) NOT NULL, "bidSpread" numeric(6,3) NOT NULL, "askSpread" numeric(6,3) NOT NULL, "orderAmount" numeric(32,16) NOT NULL DEFAULT '0', "checkIntervalSeconds" integer NOT NULL, "numberOfLayers" integer NOT NULL, "priceSourceType" character varying NOT NULL, "amountChangePerLayer" numeric(10,2) NOT NULL, "amountChangeType" character varying NOT NULL, "ceilingPrice" integer, "floorPrice" integer, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "status" character varying NOT NULL, "lastTradingAttemptAt" TIMESTAMP, "pausedReason" character varying, CONSTRAINT "PK_5c68cdc7d41ab709034faf5e23c" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "exchange_api_key" ("id" SERIAL NOT NULL, "userId" character varying NOT NULL, "clientId" character varying NOT NULL, "description" character varying, "exchangeName" character varying NOT NULL, "isDefaultAccount" boolean NOT NULL DEFAULT false, "apiKey" character varying NOT NULL, "apiSecret" character varying NOT NULL, "apiPassphrase" character varying, "removed" boolean NOT NULL DEFAULT false, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_41b21b80e50de36cd4fb713bd37" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "web3_identity_key" ("id" SERIAL NOT NULL, "privateKey" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_ec8173a36857981eba33d083fde" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "web3_identity_rpc" ("id" SERIAL NOT NULL, "chainId" integer NOT NULL, "rpcUrl" character varying NOT NULL, "removed" boolean NOT NULL DEFAULT false, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_a3a5c7d95c70c04a9dd5b679497" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "campaign_contribution" ("id" SERIAL NOT NULL, "chainId" integer NOT NULL, "exchangeName" character varying NOT NULL, "campaignAddress" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_85cd354c4b44f9011ffa8f0a7b8" UNIQUE ("campaignAddress"), CONSTRAINT "PK_515cde43dd21b82cd8c7ff40aef" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "exchange_api_key_read_only" ("id" SERIAL NOT NULL, "userId" character varying NOT NULL, "clientId" character varying NOT NULL, "exchangeName" character varying NOT NULL, "apiKey" character varying NOT NULL, "apiSecret" character varying NOT NULL, "apiPassphrase" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_893709482380f6c385c752c0ed7" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "strategy_volume" ("id" SERIAL NOT NULL, "userId" character varying NOT NULL, "clientId" character varying NOT NULL, "exchangeName" character varying NOT NULL, "sideA" character varying NOT NULL, "sideB" character varying NOT NULL, "amountToTrade" numeric(32,16) NOT NULL DEFAULT '0', "incrementPercentage" numeric(5,2) NOT NULL, "tradeIntervalSeconds" integer NOT NULL, "numTotalTrades" integer NOT NULL, "pricePushRate" numeric(5,2) NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "status" character varying NOT NULL, "lastTradingAttemptAt" TIMESTAMP, "pausedReason" character varying, "tradesExecuted" integer NOT NULL DEFAULT '0', "currentMakerPrice" numeric(12,6), CONSTRAINT "PK_fd7507408e72a7063020239ccac" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "exchange_deposit" ("id" SERIAL NOT NULL, "userId" character varying NOT NULL, "txId" character varying NOT NULL, "txTimestamp" character varying NOT NULL, "exchangeName" character varying NOT NULL, "network" character varying NOT NULL, "symbol" character varying NOT NULL, "amount" numeric(32,16) NOT NULL DEFAULT '0', "createdAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_b13498118c0bfedd36c6c4761a7" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "exchange_withdrawal" ("id" SERIAL NOT NULL, "userId" character varying NOT NULL, "txId" character varying NOT NULL, "txTimestamp" character varying NOT NULL, "exchangeName" character varying NOT NULL, "network" character varying NOT NULL, "symbol" character varying NOT NULL, "amount" numeric(32,16) NOT NULL DEFAULT '0', "createdAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_89bc31cb50afb211a8d07fbcf6f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`ALTER TABLE "trade_operation" ADD CONSTRAINT "FK_26719a344c4f6df76130eafbbe0" FOREIGN KEY ("orderId") REFERENCES "trade_order"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "trade_operation" DROP CONSTRAINT "FK_26719a344c4f6df76130eafbbe0"`);
        await queryRunner.query(`DROP TABLE "exchange_withdrawal"`);
        await queryRunner.query(`DROP TABLE "exchange_deposit"`);
        await queryRunner.query(`DROP TABLE "strategy_volume"`);
        await queryRunner.query(`DROP TABLE "exchange_api_key_read_only"`);
        await queryRunner.query(`DROP TABLE "campaign_contribution"`);
        await queryRunner.query(`DROP TABLE "web3_identity_rpc"`);
        await queryRunner.query(`DROP TABLE "web3_identity_key"`);
        await queryRunner.query(`DROP TABLE "exchange_api_key"`);
        await queryRunner.query(`DROP TABLE "strategy_market_making"`);
        await queryRunner.query(`DROP TABLE "strategy_arbitrage"`);
        await queryRunner.query(`DROP TABLE "trade_order"`);
        await queryRunner.query(`DROP TABLE "trade_operation"`);
    }

}
