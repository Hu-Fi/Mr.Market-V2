import {
  AmountChangeType,
  PriceSourceType,
  StrategyInstanceStatus,
} from '../../../common/enums/strategy-type.enums';
import { Arbitrage } from '../../../common/entities/arbitrage.entity';
import { MarketMaking } from '../../../common/entities/market-making.entity';

export const arbitrageStrategiesDataFixture: Arbitrage[] = [
  {
    id: 1,
    userId: 'user1',
    clientId: 'client1',
    sideA: 'BTC',
    sideB: 'USD',
    amountToTrade: 1000.0,
    minProfitability: 0.05,
    exchangeAName: 'ExchangeA',
    exchangeBName: 'ExchangeB',
    checkIntervalSeconds: 60,
    maxOpenOrders: 5,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.CREATED,
    lastTradingAttemptAt: new Date(),
  },
  {
    id: 2,
    userId: 'user2',
    clientId: 'client2',
    sideA: 'BTC',
    sideB: 'USD',
    amountToTrade: 500.0,
    minProfitability: 0.03,
    exchangeAName: 'ExchangeA',
    exchangeBName: 'ExchangeB',
    checkIntervalSeconds: 120,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.CREATED,
    lastTradingAttemptAt: new Date(),
  },
];

export const marketMakingStrategiesDataFixture: MarketMaking[] = [
  {
    id: 1,
    userId: 'user1',
    clientId: 'client1',
    sideA: 'BTC',
    sideB: 'USD',
    exchangeName: 'ExchangeA',
    bidSpread: 0.01,
    askSpread: 0.01,
    orderAmount: 1000.0,
    checkIntervalSeconds: 60,
    numberOfLayers: 5,
    priceSourceType: PriceSourceType.MID_PRICE,
    amountChangePerLayer: 50.0,
    amountChangeType: AmountChangeType.FIXED,
    ceilingPrice: 50000.0,
    floorPrice: 30000.0,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.CREATED,
    lastTradingAttemptAt: new Date(),
  },
  {
    id: 2,
    userId: 'user2',
    clientId: 'client2',
    sideA: 'BTC',
    sideB: 'USD',
    exchangeName: 'ExchangeB',
    bidSpread: 0.02,
    askSpread: 0.02,
    orderAmount: 500.0,
    checkIntervalSeconds: 120,
    numberOfLayers: 3,
    priceSourceType: PriceSourceType.LAST_PRICE,
    amountChangePerLayer: 30.0,
    amountChangeType: AmountChangeType.PERCENTAGE,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.STOPPED,
    lastTradingAttemptAt: new Date(),
  },
];
