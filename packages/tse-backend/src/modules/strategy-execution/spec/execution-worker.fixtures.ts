import {
  AmountChangeType,
  PriceSourceType,
  StrategyInstanceStatus,
} from '../../../common/enums/strategy-type.enums';
import { StrategyArbitrage } from '../../../common/entities/startegy-arbitrage.entity';
import { StrategyMarketMaking } from '../../../common/entities/strategy-market-making.entity';
import { StrategyVolume } from '../../../common/entities/strategy-volume.entity';
import { Decimal } from 'decimal.js';

export const arbitrageStrategiesDataFixture: StrategyArbitrage[] = [
  {
    id: 1,
    userId: 'user1',
    clientId: 'client1',
    sideA: 'BTC',
    sideB: 'USD',
    amountToTrade: new Decimal(1000.0),
    minProfitability: 0.05,
    exchangeAName: 'ExchangeA',
    exchangeBName: 'ExchangeB',
    checkIntervalSeconds: 60,
    maxOpenOrders: 5,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.CREATED,
    lastTradingAttemptAt: new Date(),
    pausedReason: 'Manual pause',
  },
  {
    id: 2,
    userId: 'user2',
    clientId: 'client2',
    sideA: 'BTC',
    sideB: 'USD',
    amountToTrade: new Decimal(500.0),
    minProfitability: 0.03,
    exchangeAName: 'ExchangeA',
    exchangeBName: 'ExchangeB',
    checkIntervalSeconds: 120,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.CREATED,
    lastTradingAttemptAt: new Date(),
    pausedReason: 'Manual pause',
  },
];

export const marketMakingStrategiesDataFixture: StrategyMarketMaking[] = [
  {
    id: 1,
    userId: 'user1',
    clientId: 'client1',
    sideA: 'BTC',
    sideB: 'USD',
    exchangeName: 'ExchangeA',
    oracleExchangeName: 'ExchangeB',
    startPrice: 1,
    bidSpread: 0.01,
    askSpread: 0.01,
    orderAmount: new Decimal(1000.0),
    checkIntervalSeconds: 60,
    numberOfLayers: 5,
    priceSourceType: PriceSourceType.MID_PRICE,
    amountChangePerLayer: 50.0,
    amountChangeType: AmountChangeType.FIXED,
    ceilingPrice: 50000.0,
    floorPrice: 30000.0,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.CREATED,
    lastTradingAttemptAt: new Date(),
    pausedReason: 'Manual pause',
  },
  {
    id: 2,
    userId: 'user2',
    clientId: 'client2',
    sideA: 'BTC',
    sideB: 'USD',
    exchangeName: 'ExchangeB',
    oracleExchangeName: 'ExchangeB',
    startPrice: 1,
    bidSpread: 0.02,
    askSpread: 0.02,
    orderAmount: new Decimal(500.0),
    checkIntervalSeconds: 120,
    numberOfLayers: 3,
    priceSourceType: PriceSourceType.LAST_PRICE,
    amountChangePerLayer: 30.0,
    amountChangeType: AmountChangeType.PERCENTAGE,
    createdAt: new Date(),
    updatedAt: new Date(),
    status: StrategyInstanceStatus.STOPPED,
    lastTradingAttemptAt: new Date(),
    pausedReason: 'Manual pause',
  },
];

export const volumeStrategiesDataFixture: StrategyVolume[] = [
  {
    id: 1,
    userId: 'user123',
    clientId: 'clientA',
    exchangeName: 'Binance',
    sideA: 'ETH',
    sideB: 'USDT',
    amountToTrade: new Decimal(1500.0),
    incrementPercentage: 3.5,
    tradeIntervalSeconds: 45,
    numTotalTrades: 10,
    pricePushRate: 0.75,
    tradesExecuted: 3,
    currentMakerPrice: 2540.123456,
    status: StrategyInstanceStatus.CREATED,
    createdAt: new Date('2024-04-10T10:00:00Z'),
    updatedAt: new Date('2024-04-10T11:00:00Z'),
    lastTradingAttemptAt: new Date('2024-04-10T11:00:00Z'),
    pausedReason: null,
  },
  {
    id: 2,
    userId: 'user456',
    clientId: 'clientB',
    exchangeName: 'Coinbase',
    sideA: 'BTC',
    sideB: 'USD',
    amountToTrade: new Decimal(25000.0),
    incrementPercentage: 1.2,
    tradeIntervalSeconds: 60,
    numTotalTrades: 15,
    pricePushRate: 1.25,
    tradesExecuted: 8,
    currentMakerPrice: 47300.654321,
    status: StrategyInstanceStatus.PAUSED,
    createdAt: new Date('2024-04-09T09:30:00Z'),
    updatedAt: new Date('2024-04-09T10:30:00Z'),
    lastTradingAttemptAt: new Date('2024-04-09T10:30:00Z'),
    pausedReason: 'Manual pause for maintenance',
  },
  {
    id: 3,
    userId: 'user789',
    clientId: 'clientC',
    exchangeName: 'Kraken',
    sideA: 'ADA',
    sideB: 'EUR',
    amountToTrade: new Decimal(5000.0),
    incrementPercentage: 2.0,
    tradeIntervalSeconds: 30,
    numTotalTrades: 20,
    pricePushRate: 0.5,
    tradesExecuted: 20,
    currentMakerPrice: 1.234567,
    status: StrategyInstanceStatus.STOPPED,
    createdAt: new Date('2024-04-08T08:15:00Z'),
    updatedAt: new Date('2024-04-08T09:15:00Z'),
    lastTradingAttemptAt: new Date('2024-04-08T09:15:00Z'),
    pausedReason: 'Strategy completed successfully',
  },
];
