import {
  AmountChangeType,
  PriceSourceType,
  StrategyInstanceStatus,
} from '../../../../../common/enums/strategy-type.enums';
import { Decimal } from 'decimal.js';

export const MarketMakingCommandFixture = {
  userId: 'user1',
  clientId: 'client1',
  sideA: 'ETH',
  sideB: 'USDT',
  exchangeName: 'exchangea',
  bidSpread: 0.1,
  askSpread: 0.1,
  orderAmount: new Decimal(1.0),
  checkIntervalSeconds: 10,
  numberOfLayers: 1,
  priceSourceType: PriceSourceType.MID_PRICE,
  amountChangePerLayer: 1,
  amountChangeType: AmountChangeType.PERCENTAGE,
  ceilingPrice: 2000,
  floorPrice: 1500,
};

export const MarketMakingPartialDataFixture = {
  userId: 'user1',
  clientId: 'client1',
  sideA: 'ETH',
  sideB: 'BTC',
  exchangeName: 'Binance',
  bidSpread: 0.1,
  askSpread: 0.1,
  orderAmount: new Decimal(1),
  checkIntervalSeconds: 10,
  numberOfLayers: 1,
  priceSourceType: PriceSourceType.MID_PRICE,
  amountChangePerLayer: 1,
  amountChangeType: AmountChangeType.PERCENTAGE,
  ceilingPrice: 50000,
  floorPrice: 20000,
};

export const MarketMakingDataFixture = {
  id: 1,
  userId: MarketMakingPartialDataFixture.userId,
  clientId: MarketMakingPartialDataFixture.clientId,
  sideA: MarketMakingPartialDataFixture.sideA,
  sideB: MarketMakingPartialDataFixture.sideB,
  exchangeName: MarketMakingPartialDataFixture.exchangeName,
  bidSpread: MarketMakingPartialDataFixture.bidSpread,
  askSpread: MarketMakingPartialDataFixture.askSpread,
  orderAmount: MarketMakingPartialDataFixture.orderAmount,
  checkIntervalSeconds: MarketMakingPartialDataFixture.checkIntervalSeconds,
  numberOfLayers: MarketMakingPartialDataFixture.numberOfLayers,
  priceSourceType: MarketMakingPartialDataFixture.priceSourceType,
  amountChangePerLayer: MarketMakingPartialDataFixture.amountChangePerLayer,
  amountChangeType: MarketMakingPartialDataFixture.amountChangeType,
  ceilingPrice: MarketMakingPartialDataFixture.ceilingPrice,
  floorPrice: MarketMakingPartialDataFixture.floorPrice,
  createdAt: new Date(),
  updatedAt: new Date(),
  status: StrategyInstanceStatus.CREATED,
  startPrice: undefined,
  lastTradingAttemptAt: new Date(),
  pausedReason: undefined,
};
